"use strict";"require uci";"require ui";"require view";"require fs";"require view/v2ray/include/custom as custom";var getSections=function(e){var o=[];return uci.sections("v2ray",e,(function(e){e[".alias"]&&o.push({name:e[".name"],alias:e[".alias"]})})),Promise.resolve(o)};return view.extend({handleServiceReload:function(e,o){return fs.exec("/etc/init.d/v2ray",["reload"]).then(L.bind((function(e,o){0!==o.code&&(ui.addNotification(null,[E("p",_("Reload service failed with code %d").format(o.code)),o.stderr?E("pre",{},[o.stderr]):""]),L.raise("Error","Reload failed"))}),this,o.target)).catch((function(e){ui.addNotification(null,E("p",e.message))}))},load:function(){return Promise.all([getSections("inbound"),getSections("outbound")])},render:function(e){for(var o,a=e[0],r=e[1],n=0,t=e;n<t.length;n++){var i=t[n];console.log(i)}var l=new form.Map("v2ray","%s - %s".format(_("V2ray"),_("Global Settings")),"<p>%s</p><p>%s</p>".format(_("A platform for building proxies to bypass network restrictions."),_("For more information, please visit: %s").format('<a href="https://www.v2ray.com" target="_blank">https://www.v2ray.com</a>'))),s=l.section(form.NamedSection,"main","v2ray");return s.addremove=!1,s.anonymous=!0,(o=s.option(form.Flag,"enabled",_("Enabled"))).rmempty=!1,(o=s.option(form.Button,"_reload",_("Reload Service"),_("This will restart service when config file changes."))).inputstyle="action reload",o.inputtitle=_("Reload"),o.onclick=L.bind(this.handleServiceReload,this),(o=s.option(form.Value,"v2ray_file",_("V2Ray file"),"<em>%s</em>".format(_("Collecting data...")))).datatype="file",o.placeholder="/usr/bin/v2ray",o.rmempty=!1,(o=s.option(form.Value,"asset_location",_("V2Ray asset location"),_("Directory where geoip.dat and geosite.dat files are, default: same directory as V2Ray file."))).datatype="directory",o.placeholder="/usr/bin",(o=s.option(form.Value,"mem_percentage",_("Memory percentage"),_("The maximum percentage of memory used by V2Ray."))).datatype="and(uinteger, max(100))",o.placeholder="80",(o=s.option(form.Value,"config_file",_("Config file"),_("Use custom config file."))).datatype="file",o.value("",_("None")),(o=s.option(form.Value,"access_log",_("Access log file"))).depends("config_file",""),o.value("/dev/null"),o.value("/var/log/v2ray-access.log"),(o=s.option(form.ListValue,"loglevel",_("Log level"))).depends("config_file",""),o.value("debug",_("Debug")),o.value("info",_("Info")),o.value("warning",_("Warning")),o.value("error",_("Error")),o.value("none",_("None")),o.default="warning",(o=s.option(form.Value,"error_log",_("Error log file"))).value("/dev/null"),o.value("/var/log/v2ray-error.log"),o.depends("loglevel","debug"),o.depends("loglevel","info"),o.depends("loglevel","warning"),o.depends("loglevel","error"),(o=s.option(form.MultiValue,"inbounds",_("Inbounds enabled"))).depends("config_file",""),a.forEach((function(e){o.value(e.name,e.alias)})),(o=s.option(form.MultiValue,"outbounds",_("Outbounds enabled"))).depends("config_file",""),r.forEach((function(e){o.value(e.name,e.alias)})),(o=s.option(form.Flag,"stats_enabled","%s - %s".format(_("Stats"),_("Enabled")))).depends("config_file",""),(o=s.option(form.Flag,"transport_enabled","%s - %s".format(_("Transport"),_("Enabled")))).depends("config_file",""),(o=s.option(custom.TextValue,"_transport","%s - %s".format(_("Transport"),_("Settings")),_("<code>transport</code> field in top level configuration, JSON string"))).depends("transport_enabled","1"),o.wrap="off",o.rows=5,o.datatype="string",o.filepath="/etc/v2ray/transport.json",l.render()}});