"use strict";"require uci";"require ui";"require view";"require fs";"require view/v2ray/include/custom as custom";var getSections=function(e){var o=[];return uci.sections("v2ray",e,(function(e){e[".alias"]&&o.push({name:e[".name"],alias:e[".alias"]})})),Promise.resolve(o)};return view.extend({handleServiceReload:function(e,o){return fs.exec("/etc/init.d/v2ray",["reload"]).then(L.bind((function(e,o){0!==o.code&&(ui.addNotification(null,[E("p",_("Reload service failed with code %d").format(o.code)),o.stderr?E("pre",{},[o.stderr]):""]),L.raise("Error","Reload failed"))}),this,o.target)).catch((function(e){ui.addNotification(null,E("p",e.message))}))},load:function(){return Promise.all([getSections("inbound"),getSections("outbound")])},render:function(e){for(var o,a,r,n=e[0],t=e[1],i=0,l=e;i<l.length;i++){var s=l[i];console.log(s)}return(a=(o=new form.Map("v2ray","%s - %s".format(_("V2ray"),_("Global Settings")),"<p>%s</p><p>%s</p>".format(_("A platform for building proxies to bypass network restrictions."),_("For more information, please visit: %s").format('<a href="https://www.v2ray.com" target="_blank">https://www.v2ray.com</a>')))).section(form.NamedSection,"main","v2ray")).addremove=!1,a.anonymous=!0,(r=a.option(form.Flag,"enabled",_("Enabled"))).rmempty=!1,(r=a.option(form.Button,"_reload",_("Reload Service"),_("This will restart service when config file changes."))).inputstyle="action reload",r.inputtitle=_("Reload"),r.onclick=L.bind(this.handleServiceReload,this),(r=a.option(form.Value,"v2ray_file",_("V2Ray file"),"<em>%s</em>".format(_("Collecting data...")))).datatype="file",r.placeholder="/usr/bin/v2ray",r.rmempty=!1,(r=a.option(form.Value,"asset_location",_("V2Ray asset location"),_("Directory where geoip.dat and geosite.dat files are, default: same directory as V2Ray file."))).datatype="directory",r.placeholder="/usr/bin",(r=a.option(form.Value,"mem_percentage",_("Memory percentage"),_("The maximum percentage of memory used by V2Ray."))).datatype="and(uinteger, max(100))",r.placeholder="80",(r=a.option(form.Value,"config_file",_("Config file"),_("Use custom config file."))).datatype="file",r.value("",_("None")),(r=a.option(form.Value,"access_log",_("Access log file"))).depends("config_file",""),r.value("/dev/null"),r.value("/var/log/v2ray-access.log"),(r=a.option(form.ListValue,"loglevel",_("Log level"))).depends("config_file",""),r.value("debug",_("Debug")),r.value("info",_("Info")),r.value("warning",_("Warning")),r.value("error",_("Error")),r.value("none",_("None")),r.default="warning",(r=a.option(form.Value,"error_log",_("Error log file"))).value("/dev/null"),r.value("/var/log/v2ray-error.log"),r.depends("loglevel","debug"),r.depends("loglevel","info"),r.depends("loglevel","warning"),r.depends("loglevel","error"),(r=a.option(form.MultiValue,"inbounds",_("Inbounds enabled"))).depends("config_file",""),n.forEach((function(e){r.value(e.name,e.alias)})),(r=a.option(form.MultiValue,"outbounds",_("Outbounds enabled"))).depends("config_file",""),t.forEach((function(e){r.value(e.name,e.alias)})),(r=a.option(form.Flag,"stats_enabled","%s - %s".format(_("Stats"),_("Enabled")))).depends("config_file",""),(r=a.option(form.Flag,"transport_enabled","%s - %s".format(_("Transport"),_("Enabled")))).depends("config_file",""),(r=a.option(custom.TextValue,"_transport","%s - %s".format(_("Transport"),_("Settings")),_("<code>transport</code> field in top level configuration, JSON string"))).depends("transport_enabled","1"),r.wrap="off",r.rows=5,r.datatype="string",r.filepath="/etc/v2ray/transport.json",o.render()}});